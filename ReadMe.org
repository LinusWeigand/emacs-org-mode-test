#+TITLE: Using a reverse proxy with Keycloak to authenticate users
#+PROPERTY: header-args:emacs-lisp :tangle .ecams.d/init.el
#+STARTUP: inlineimages

* Preface

The reverse proxy is currently the cutting-edge technolody to authenticate users for Web-Applications and is used by all Tech giants such as Google, Amazon, Microsoft.
This documetation shows why a reverse proxy is even necessary, the architecture and how to actually implement it with Keycloak.

* Table Of Contents
:PROPPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#preface][Preface]]
- [[#naive-solution][Naive Solution]]
  - [[#token-flow-naive-solution][Token Flow Naive Solution]]
  - [[#problems-with-the-naive-solution][Problems With The Naive Solution]]
- [[#proxy][Proxy]]
- [[#the-solution-easier-and-more-secure-with-authentication-gateways][The Solution: Easier And More Secure With Authentication Gateways]]
  - [[#the-thing-with-csrf-attacks][The Thing With CSRF Attacks]]
  - [[#token-flow-solution][Token Flow Solution]]
- [[#implementation][Implementation]]
  - [[#keycloak][Keycloak]]
    - [[#setup-and-installation-With-docker][Setup and installation with Docker]]
    - [[#setup-and-installation-with-a-standalone-installation][Setup And Installation With A Standalone Installation]]
    - [[#Configuration-of-keycloak][Configuration Of Keycloak]]
  - [[#reverse-proxy][Reverse Proxy]]
    - [[#setup-and-installation-of-the-reverse-proxy-with-Docker][Setup And Installation Of The Reverse Proxy With Docker]]
    - [[#setup-and-installation-of-the-reverse-proxy-with-a-standalone-installation][Setup And Installation Of The Reverse Proxy With A Standalone Installation]]
    - [[#Configuration-of-the-reverse-proxy][Configuration Of The Revere Proxy]]
  - [[#web-application][Web Application]]
    - [[#setup-and-installation-of-the-web-application-with-Docker][Setup And Installation Of The Web Application With Docker]]
    - [[#setup-and-installation-of-the-web-application-with-a-standalone-installation][Setup And Installation Of The Web Application With A Standalone Installation]]
    - [[#Configuration-of-the-web-application][Configuration Of The Web Application]]
      - [[#react][React]]
      - [[#angular][Angular]]
- [[#conclusion][Conclusion]]
  - [[#summary][Summary]]
  - [[#further-reading][Further Reading]]
  

:END: 

* Naive Solution

The naive solution is to implement the authentication in the Web-Application itself. 

This is a very bad idea, because it is very hard to implement and maintain.
The solution to this problem is an authentication server which is responsible for the authentication and the Web-Application only has to check if the user is authenticated.

#+CAPTION: The Naive Solution Flow
#+MAME: naive-solution
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/naive_solution.png]]

** Token Flow Naive Solution

The client sends a request to the Web-Application and the Web-Application checks if the client has an valid access token.
If the client has an valid access token, the Web-Application page data is send to the browser. 
If the client has no valid access token, the Web-Application redirects the user to the authentication server.

The user has to login and the authentication server returns an access and an id token in the URL.
These are then stored in the browser and the user gets redirected to the Web-Application.

** Problems With The Naive Solution

The problem is the inherent security flaws this approach comes with, because the user can view, copy and manipulate the access and the id token.
Also if the user uses a public computer or a proxy server, the access and the id token can be stolen.

But there's another problem: browsers are not able to store the access and the id token in a secure way.
There are numerous approaches to cross-site scripting ant thus to hacking into the SPA.

* Proxy

Before jumping into the solution, let's take a look at what a proxy actually is because the solution is a kind of reverse proxy hence the name.
Meaning the direction of the requests is reversed.

A proxy is a server which is between the client and the server.
The client sends a request to the proxy and the proxy forwards the request to the server.
The server sends a response to the proxy and the proxy forwards the response to the client.

This can be used to cache the response of the server, to add additional headers or to block requests. 
Many companies also use proxies to spy on their employees.

The reverse proxy is the other way around.

Instead of forwarding the client request to the server, 
the reverse proxy handles requests and divides the server resources between all users therefore load balancing all requests. 
Meaning if one server get too conjecsted, the reverse proxy can redirect the request to another server.

It can also sum up many ressource servers/ Web Applications into one address. 
Because the destination is not specified by the client but the reverse proxy itself, it is called reversed.


* The Solution: Easier And More Secure With Authentication Gateways

As shown in an earlier section, the naive solution is not secure and not easy to implement.
For this reason, an approach was developed: Server-Side [[https://en.wikipedia.org/wiki/OAuth#OAuth_2.0][OAuth 2.0]] and server-side Token handling.

To avoid this server-side logic from bleeding into our server-side APIs, we could encapsulate it in an reusable reverse proxy also called Authentication Gateway:

#+CAPTION: The Reverse Proxy Flow
#+MAME: reverse-proxy
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/reverse_proxy.png]]

The idea is to tunnel all calls from the client through the gateway. This gateway takes care of obtaining and refreshing tokens and forwarding them to the resource server (the Web API).
However all tokens remain at the gateway. The browser only gets an HTTP-only cookie that represents the session at the gateway.
Since this cookie is HTTP-only, an attacker cannot steal it via a JavaScript-based attack.

This creates a great abstraction layer between the client and the resource server. The client only needs to know the URL of the gateway, but can reach any resource server behind it.

Since the tokens never end up in the browser, many of the possible attacks do not apply.
In addition, this approach drastically simplifies the implementation of the frontend, since it no longer has to deal with tokens and the user is now authenticated without any frontend code.

In order to initiate (re)authentication or to log-out the user, it is sufficient to be forwarded to a URL provided by the gateway. The front end can obtain information about the current user via a simple Keycloak endpoint.

** The Thing With CSRF Attacks
As a side note, there is still one thing to solve:
Since we are now working with cookies again, we need to protect ourselves against [[https://en.wikipedia.org/wiki/Cross-site_request_forgery][CSRF attacks]].
Therefore, the gateway's session cookie should not only be HTTP-only, but also have the [[https://en.wikipedia.org/wiki/SameSite][SameSite]] attribute set to "strict" or "lax".
This prevents the cookie from being sent to the gateway when the user visits a third-party website. 
This is important because the third-party website could then send a request to the gateway with the user's session cookie and thus impersonate the user.

Unfortunately, SameSite does not mean "Same Origin". In contrast to Origin, the site extends over all subdomains. So if there is a less protected application on another subdomain this becomes an issue. 
As I trust that all applications under our domain are secure, I will not go into detail here, but normally we would need to use an XSRF token as well to only allow requests from the same origin.


** Token Flow Solution

The client sends a request to the gateway. The gateway checks if it has an valid access token belonging to the user. This is done by checking the HTTP-only cookie. 
If the gateway has an valid access token, the gateway forwards the request to the Web-Application. 
If the gateway has no valid access token, the gateway redirects the user to the authentication server.

The user has to login and the authentication server returns an access and id token to the gateway.
These are then stored in the gateway and the user gets redirected to the Web-Application.
The Web-Application can now access the user data, reauthenticate and logout via endpoints of the authorization server.

* Implementation

To implement this architecture we first have to setup the authentication server with Keycloak and get it running.
We then have to start the Application server and configure the reverse proxy accordingly.

** Keycloak

There are two ways to setup Keycloak: either with Docker or with a standalone installation.

**** Setup And installation With Docker

To setup Keycloak with Docker, we first have to install Docker and run the following command:

#+BEGIN_SRC shell
docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:15.0.2
#+END_SRC

This will start Keycloak on port 8080 and create an admin user with the username and password set to admin.

**** Setup And Installation With A Standalone Installation

To setup Keycloak with a standalone installation, we first have to download the Keycloak server from the [[https://www.keycloak.org/downloads][official website]].

After we have downloaded the server, we have to unzip the file and run the following command in the download directory:

#+BEGIN_SRC shell
.\bin\add-user-keycloak.bat -u admin -p admin
#+END_SRC

This will create an admin user with the username and password set to admin.

To make it easier to start the Keycloak server, we can create an environment variable with the file path to the Keycloak server:
[[https://www.alphr.com/set-environment-variables-windows-11/][This guide]] shows how to set environment variables on Windows 11.
Assuming we set the environment variable's name to KC_HOME, we can now start the Keycloak server with the following commands:


#+BEGIN_SRC shell
cd %KC_HOME%
.\bin\standalone.bat -Djboss.socket.binding.port-offset=100
#+END_SRC

This will start the server on port 8180.
We do this because the gateway server will be running on port 8080.

**** Configuration of Keycloak

After we have started the server, we have to create a realm and a client.

To create a realm, open localhost:8180 in a browser and click on the "Administration Console" button and login with the admin user.

#+CAPTION: Keycloak Home
#+MAME: keycloak-home
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_home.png]]

After we have logged in, we have to create a realm.
To do this, click on the "Add realm" button and enter the name of the realm, e.g. myrealm, then click save.

#+CAPTION: Keycloak Home
#+MAME: keycloak-home
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_add_realm-fix.png]]

#+CAPTION: Keycloak Home 2
#+MAME: keycloak-home2
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_add_realm2-fix.png]]

After we have created the realm, we have to create a client. This can be thought of the account that the reverse proxy will use to interact with Keycloak.
To do this, click on the "Clients" button and then on the "Create" button.

#+CAPTION: Keycloak Clients Tab
#+MAME: keycloak-clients-tab
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_clients_tab.png]]

#+CAPTION: Keycloak Create Client
#+MAME: keycloak-create-client
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_create_client.png]]

Enter "gateway" as the name of the client and click on the "Save" button.

After we have created the client, we have to configure the client.
To do this, click on the "Settings" button and enter the following values:

- Access Type: confidential
- Valid Redirect URIs: http://localhost:8080/*
- Web Origins: http://localhost:8080

#+CAPTION: Keycloak Configure Client
#+MAME: keycloak-configure-client
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_configure_client.png]]

This will configure the client to use the authorization code flow and to allow the gateway to access the client. 

- The Access Type has to be confidential, because the gateway will be using the client secret to authenticate itself.
- The Valid Redirect URIs has to be set to the URL of the gateway, because the gateway will be redirected to this URL after the user has logged in.
- The Web Origins has to be set to the URL of the gateway, because the gateway and only the gateway alone is permitted to send requests to Keycloak with this client.

Now we have to configure the client scopes. These are used to define which information the gateway will be able to access.
It is a way of splitting up the user data into multiple scopes, so that the gateway can only access the data it needs.

An example: The gateway only needs the user's name and email address, but not the user's address until the Web Application (e.g. An online store) wants to send a physical package to the users home address.
In this example the gateway would only have access to the user's name and email address, upon sing-up, but not the user's address, until he buy's something. This is meant by reauthentication earlier.

To do this, click on the "Client Scopes" button and add the following scopes to default and optional:

#+CAPTION: Keycloak Client Scopes
#+MAME: keycloak-client-scopes
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_client_scopes.png]]

After we have configured the client, we have to create a user. This is the actual end-user that wants to do something on the web application.
In the future, this user will be created by the web application, but for now we will create the user manually.
To do this, click on the "Users" and then on the "Add User" button.

#+CAPTION: Keycloak Users Tab
#+MAME: keycloak-users-tab
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_users_tab.png]]

#+CAPTION: Keycloak Create User
#+MAME: keycloak-create-user
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_create_user.png]]

Enter the username, Email, first name and last name of the user and click on the "Save" button.

After we have created the user, we have to set a password for the user.
To do this, click on the "Credentials" button and enter the password of the user.
Turn off the "Temporary" switch to not needing to change the password, upon sign-in. This would be turned on when the user is a different person then the Keycloak Admin. 

Then click on the "Set Password" button.

#+CAPTION: Keycloak Configure User
#+MAME: keycloak-configure-user
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_configure_user.png]]


Now we have to create a role for accessing the Web-Application.

These roles are used to define which users have access to which resources.
The ressources the user can actually access are an intersection between the user's roles and the client's roles (in our case the client would be the gateway). 

To do this, click on the "Roles" button and then on the "Add Role" button.
Enter "myrole" as the name of the role and click on the "Save" button.

#+CAPTION: Keycloak Roles Tab
#+MAME: keycloak-roles-tab
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_roles_tab.png]]

#+CAPTION: Keycloak Create Role
#+MAME: keycloak-create-role
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_create_role.png]]

After we have created the role, we have to assign the role to the user.
To do this, Navigate to the user and click on the "Role Mappings" button and add the role "myrole" to the Assigned Roles.

#+CAPTION: Keycloak Configure User Roles
#+MAME: keycloak-configure-user-roles
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_configure_user_roles.png]]

** Reverse Proxy

The Revere Proxy will be configured to route the requests to Keycloak and the Web-Application.

*** Setup And Installation Of The Reverse Proxy With Docker

*** Setup And Installation Of The Reverse Proxy With A Standalone Installation

To setup the Revere Proxy, we have clone the repository of the Revere Proxy.
To do this, run the following commands:

#+BEGIN_SRC shell
git clone https://github.com/manfredsteyer/yarp-auth-proxy.git
#+END_SRC

After that enter the directory of the Revere Proxy and install the dependencies.

#+BEGIN_SRC shell
cd yarp-auth-proxy
#+END_SRC

If you want to use the Revere Proxy with Docker, you have to run the following command:

#+BEGIN_SRC shell
docker-compose up
#+END_SRC

If you want to use the Revere Proxy without Docker, you have to run the following commands:

#+BEGIN_SRC shell
dotnet restore
dotnet run conf\appsettings.keycloak.json
#+END_SRC

*** Configuration Of The Reverse Proxy

To configure the Revere Proxy, we have to edit the file "appsettings.keycloak.json" in the directory "conf".
This file contains the configuration for the Revere Proxy.

In the "OpenIdConnect" section on line 17, we have to set the following values:

#+BEGIN_SRC json
  "OpenIdConnect": {
    "Authority": "http://localhost:8180/auth/realms/myrealm",
    "ClientId": "gateway",
    "ClientSecret": "<your client secret>",
    "Scopes": "openid profile email offline_access roles"
  },
#+END_SRC

As well as the "appCluster" section on line 99, assuming the SPA is running on port 3000:

#+BEGIN_SRC json
  "appCluster": {
        "Destinations": {
          "destination1": {
            "Address": "http://localhost:3000"
          }
        }
      }
#+END_SRC

We will setup our SPA in the next section on port 3000.

In place of "<your client secret>", we have to enter the client secret of the client "gateway" from the Keycloak Admin.
To do this, navigate to the client "gateway" and click on the "Credentials" button.
Then copy the value of the "Secret" field.

#+CAPTION: Keycloak Client Credentials
#+MAME: keycloak-client-credentials
[[https://raw.githubusercontent.com/LinusWeigand/emacs-org-mode-test/main/.github/images/keycloak_admin_client_credentials.png]]

** Web Application

The Web Application will be configured to use redirect to Keycloak in case of a reauthentication or log-out. 
It will also retrieve the user information from Keycloak endpoint.

*** Setup And Installation Of The Web Application With Docker

*** Setup And Installation Of The Web Application With A Standalone Installation

To setup the Web Application, we have clone the repository of the Web Application.
To do this, run the following commands:

#+BEGIN_SRC shell
git clone https://github.com/LinusWeigand/ethscan-react.git
#+END_SRC

After that enter the directory of the Web Application and install the dependencies.

#+BEGIN_SRC shell
cd ethscan-react
npm install
#+END_SRC

Then start the application by running the following command:

#+BEGIN_SRC shell
npm start
#+END_SRC

It should automatically run on port 3000.
If not you can run the application on port 3000 by changing the port of the start command in the file "package.json":

#+BEGIN_SRC json
  "scripts": {
    "start": "PORT=3000 react-scripts start",
  },
#+END_SRC

*** Configuration Of The Web Application

First we will look how to redirect to the keycloak endpoints in react

**** React

Anywhere in your application you can use the following functions to redirect to the keycloak endpoints:

#+BEGIN_SRC javascript
const onLogin = () => {
    window.location.href = '/login';
  }

  const onLogout = () => {
    window.location.href = '/logout';
  }

  const loadUserInfo = async () => {
    const response = await fetch('/userinfo');
    const data = await response.json();
    return data;
  }
#+END_SRC

The function "onLogin" redirects to the login endpoint of the keycloak server.
The function "onLogout" redirects to the logout endpoint of the keycloak server.
The function "loadUserInfo" retrieves the user information from the userinfo endpoint of the keycloak server.

**** Angular

* Conclusion

** Summary

In this article, we learned why the naive approach of using tokens in the browser is not secure and hard to implement and maintain.
We learned how to setup Keycloak as an Identity Provider and how to configure the Revere Proxy to route the requests to Keycloak and the Web-Application.
We also learned how to configure the Web Application to redirect to Keycloak in case of a reauthentication or log-out and how to retrieve the user information from Keycloak endpoint.

** Further Reading

- [[https://www.keycloak.org/][Keycloak]]
- [[https://github.com/manfredsteyer/yarp-auth-proxy][Revere Proxy]]
- [[https://github.com/LinusWeigand/btc-mining-tax-calculator][Web Application]]



























